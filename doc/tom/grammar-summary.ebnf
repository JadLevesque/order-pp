        <exp> ::= 8                                                                     ;; constant 8
               |  8(<pp-arg>)                                                           ;; quote abbreviation
               |  8and({<exp>}+{,})                                                     ;; logical AND
               |  8ap({<exp>}+{,})                                                      ;; application
               |  8cond({(<exp_cond>, {<exp_cons>}+{,})}+ {(8else, {<exp_alt>}+{,})}?)  ;; generalized conditional
               |  8delay(<exp>)                                                         ;; closure
               |  8do({<exp>}+{,})                                                      ;; sequencing
               |  8fn({<sym>}+{,}, <exp>)                                               ;; lambda abstraction
               |  8if(<exp_cond>, <exp_cons>, {<exp_alt>}+{,})                          ;; conditional
               |  8let({(<var>, <exp_init>)}+, {<exp_body>}+{,})                        ;; binding
               |  8letn({(<var>, <exp_init>)}+, {<exp_body>}+{,})                       ;; nested binding
               |  8or({<exp>}+{,})                                                      ;; logical OR
               |  8print({<print-exp>}+)                                                ;; output expression
               |  8quote(<pp-arg>)                                                      ;; quotation
               |  8ref(<sym>)                                                           ;; generalized variable reference
               |  8remap(<exp_fn>, <lit_n>{, {<lit_i>}+{,}}?)                           ;; generalized reparameterization
               |  8seq                                                                  ;; nil sequence constructor
               |  8seq({<exp>}+{,})                                                     ;; sequence constructor
               |  8tuple({<exp>}+{,})                                                   ;; tuple constructor
               |  <const-name>                                                          ;; top-level constant reference
               |  <fn-name>                                                             ;; top-level function reference
               |  <fn-name>({<exp>}+{,})                                                ;; top-level function application
               |  <op-name>({<exp>}+{,})                                                ;; operator application
               |  <var>                                                                 ;; variable reference

        <var> ::= 8[A-Z]                                                                ;; default variable symbols

        <sym> ::= [0-9][a-zA-Z0-9_]                                                     ;; general symbols

  <print-exp> ::= (<pp-args>)                                                           ;; output verbatim
               |  8comma                                                                ;; output comma
               |  8lparen                                                               ;; output left-paren
               |  8parens({<print-exp>}+)                                               ;; output parenthesized expression
               |  8rparen                                                               ;; output right-paren
               |  8space                                                                ;; output space
               |  <exp>                                                                 ;; output value of expression
