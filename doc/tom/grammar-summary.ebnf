        <exp> ::= <def-const>                                        ;; constant reference
               |  <def-fn>                                           ;; function reference
               |  <def-fn>({<exp>}+{,})                              ;; function application
               |  <def-op>({<exp>}+{,})                              ;; operator application
               |  <var>                                              ;; variable reference
               |  `8'                                                ;; symbol `8'
               |  `8'(<pp-arg>)                                      ;; quotation abbrev.
               |  `8and'({<exp>}+{,})                                ;; logical AND
               |  `8ap'({<exp>}+{,})                                 ;; application
               |  `8cond'({<cond-cl>}*)                              ;; full conditional
               |  `8delay'(<exp>)                                    ;; lazy evaluation
               |  `8do'({<exp>}+{,})                                 ;; sequencing
               |  `8fn'({<sym>}+{,}, <exp>)                          ;; lambda abstraction
               |  `8if'(<exp_cond>, <exp_cons>, {<exp_alt>}+{,})     ;; conditional
               |  `8let'({<binding>}*, {<exp_body>}+{,})             ;; parallel binding
               |  `8lets'({<binding>}*, {<exp_body>}+{,})            ;; serial binding
               |  `8or'({<exp>}+{,})                                 ;; logical OR
               |  `8print'({<put-exp>}*)                             ;; output expression
               |  `8quote'(<pp-arg>)                                 ;; quotation
               |  `8ref'(<sym>)                                      ;; symbol reference
               |  `8remap'(<exp_fn>, <lit_n>{, {<lit_i>}+{,}}?)      ;; reparameterization
               |  `8seq'                                             ;; nil sequence
               |  `8seq'({<exp>}+{,})                                ;; sequence constructor
               |  `8tuple'({<exp>}+{,})                              ;; tuple constructor

    <cond-cl> ::= (<exp_cond>, {<exp_cons>}+{,})                     ;; conditionally taken
               |  (`8else', {<exp_cons>}+{,})                        ;; always taken

    <binding> ::= (<sym>, <exp_init>)                                ;; binding

    <put-exp> ::= (<pp-args>)                                        ;; put verbatim
               |  <exp>                                              ;; put value
               |  `8comma'                                           ;; put comma
               |  `8lparen'                                          ;; put left-paren
               |  `8parens'({<put-exp>}*)                            ;; put parenthesized
               |  `8rparen'                                          ;; put right-paren
               |  `8space'                                           ;; put space

        <sym> ::= [`0'-`9'][`0'-`9'`A'-`Z'`a'-`z'`_']*               ;; symbol

        <var> ::= `8'[`A'-`Z']                                       ;; variable symbol
