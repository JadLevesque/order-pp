==========================================================================

  (C) Copyright Vesa Karvonen 2004.
 
  Distributed under the Boost Software License, Version 1.0.

==========================================================================

                                  NOTE
                                  ====

     These DESIGN NOTES are not intended to serve as documentation.

==========================================================================

SYNTAX
======

        <exp> ::= <fn-exp>
                | 8ap(<exp>+)
                | <var>
                | 8ref(<sym>)
                | 8remap(<exp_{fn}>, <lit_{n}>{, <lit_{i}>+}?)
                | 8quote(<pp-arg>) | 8(<pp-arg>) | 8
                | 8delay(<exp>)
                | 8if(<exp_{cond}>, <exp_{cons}>, <exp_{alt}>+)
                | 8cond((<exp_{cond}>, <exp_{cons}>+)+ (8else, <exp_{alt}>+)?)
                | 8and(<exp>+)
                | 8or(<exp>+)
                | 8cat(<exp>+)
                | 8seq | 8seq(<exp>+)
                | 8tuple(<exp>+)
                | 8do(<exp>+)
                | 8let((<var>, <exp_{init}>)+, <exp_{body}>+)
                | 8letn((<var>, <exp_{init}>)+, <exp_{body}>+)
                | 8print(<print-exp>+)
-               | 8match(<exp_{val}>, (<pat>, <exp>+)+)
-               | 8try(<exp_{body}>, <var>, <exp_{handler}>)
                | <fn>
                | <fn>(<exp>+)
                | <op>(<exp>+)
                | <const>

     <fn-exp> ::= 8fn(<sym>+, <exp>)

        <var> ::= 8[A-Z]

        <sym> ::= [0-9][a-zA-Z0-9_]*

  <print-exp> ::= <exp>
                | (<pp-tokens>)
                | 8comma
                | 8lparen
                | 8rparen
                | 8parens(<print-exp>+)

-       <pat> ::= 8tuple(<pat>+{,8rest(<sym>)}?)
-               | 8seq(<pat>+{,8rest(<sym>)}?)
-               | <ctor>
-               | <ctor>(<pat>+)
-               | 8nil
-               | 8(<sym>)
-               | 1..100
-               | <var>        ;; Matches anything and binds <var>
-               | 8_           ;;     -- || --     and binds nothing

--------------------------------------------------------------------------

DEFINITIONS <#define ORDER_PP_DEF_>
-----------

Order should support various kinds of definitions for ease-of-use.

  <name> ORDER_PP_CONST(<pp-arg>)

Defines a named constant. The expression ''<name>'' then evaluates
to ''<pp-arg>''. Constant definitions can also be function-like
macros, but except for the highly useful ''8(<pp-arg>)'' there
probably aren't many uses for such definitions.

It should also be possible to get the value of a constant so that it can
be embedded into another constant. This is necessary to avoid having to
manually duplicate information accross constants. For this purpose, a
macro ''ORDER_PP_GET_CONST(<name>)'' should be defined.

  <name>(<pp-args>) ORDER_PP_MACRO(<exp>)

Defines a "macro". The effect is that an expression of the form
''<name>(<params>)'' is macro replaced to ''<exp>''. The interpreter
then evaluates the ''<exp>''. Macros are efficient, because the
macro replacement doesn't take an additional continuation machine
step. Macros can not be generally partially applied and may cause
surprises.

  <name> ORDER_PP_FN(<exp_{fn}>)
  <name> ORDER_PP_FN_CM(<arity>, <instr>)
  <name> ORDER_PP_FN_MACRO(<arity>, <macro>)
  <name> ORDER_PP_FN_NATIVE(<arity>, <macro>)

Each of the above defines a function. Functions take their arguments
one-by-one and have a fixed arity.

  <name> ORDER_PP_OP(<assoc>,<pp-arg_{unit}>,<exp_{fn}>)
  <name> ORDER_PP_OP_CM(<assoc>,<pp-arg_{unit}>,<instr>)
  <name> ORDER_PP_OP_MACRO(<assoc>,<pp-arg_{unit}>,<macro>)
  <name> ORDER_PP_OP_NATIVE(<assoc>,<pp-arg_{unit}>,<macro>)

Each of the above defines an operator. Operators take all of their
arguments immediately and they can not be applied partially. The
associativity of an operator is one of:

  left      | left-associative            | op(... op(x1,x2) ..., xn)
  left_w_1  | left-associative with unit  | op(... op( 1,x1) ..., xn)
  right     | right-associative           | op(xn, ... op(x2,x1) ...)
  right_w_1 | right-associative with unit | op(xn, ... op(x1, 1) ...)

The unit element is unused when associativity is ''left'' or ''right''.

--------------------------------------------------------------------------

DATA TYPES
==========

Aggregate Types
---------------

Order should support at least tuples and sequences. Tuples are
required for passing arguments to macros and are generally useful as
input syntax. Sequences are more efficient than lists and are also
syntactically simpler.

Tuples should only require a small number of first-order functions.

Sequences should come with a fairly comprehensive set of optimized
functions, in order to enable decent performance.

Strings
-------

TBD!

Set, Mat and Priority Queue
---------------------------

More advanced program generators are going to need sets, maps and priority
queues. (For string processing, a trie might also be useful.)

TBD!

--------------------------------------------------------------------------

STANDARD PRELUDE
================

Arithmetic
----------

   {0, ..., 7, 9, ..., 100} : Lit

   8to_lit(n)            : Num -> Lit

   8nat(d0, d1, ..., dN) : Nat

   8dec(n)               : Num -> Num
   8inc(n)               : Num -> Num

   8add(n0, n1, ..., nN) : Num+ -> Num
   8div(n0, n1, ..., nN) : Num+ -> Num
   8mul(n0, n1, ..., nN) : Num+ -> Num
   8sub(n0, n1, ..., nN) : Num+ -> Num

   8minus(ln, rn)        : Num -> Num -> Num
   8plus(ln, rn)         : Num -> Num -> Num
   8quotient(ln, rn)     : Num -> Num -> Num
   8remainder(ln, rn)    : Num -> Num -> Num
   8times(ln, rn)        : Num -> Num -> Num

   8is_0(n)              : Num -> Bool
   8isnt_0(n)            : Num -> Bool

   8equal(ln, rn)        : Num -> Num -> Bool
   8not_eq(ln, rn)       : Num -> Num -> Bool

   8greater(ln, rn)      : Num -> Num -> Bool
   8greater_eq(ln, rn)   : Num -> Num -> Bool
   8less(ln, rn)         : Num -> Num -> Bool
   8less_eq(ln, rn)      : Num -> Num -> Bool

Boolean
-------

   8true  : Bool
   8false : Bool

   8not(x) : Bool -> Bool

Control
-------

   8call_cc(fn)  : ((a -> b) -> a) -> a

   8eval(env, exp) : Env -> Exp -> a

   8exit(x) : a -> b

   8force(p) : Promise(a) -> a

   8for_each(cn, st, op, x) : (a -> Bool) -> (a -> a) -> (a -> b) -> a -> Nil

   8for_each_in_range(op, i0, i1) : (Num -> a) -> Num -> Num -> Nil

   8while(cn, st, x) : (a -> Bool) -> (a -> a) -> a -> a
   8until(cn, st, x) : (a -> Bool) -> (a -> a) -> a -> a

   8unless(<exp_{cond}>, <exp_{body}>+)
   8when(<exp_{cond}>, <exp_{body}>+)

   8with_assert(<exp_{cond}>, <exp_{body}>)

Environments
------------

   8env_nil                  : Env

   8env_bind(s, e, x)        : Sym -> Env -> a -> Env
   8env_ref(s, e)            : Sym -> Env -> a

   8env_to_seq_of_pairs(e)   : Env -> Seq
   8seq_of_pairs_to_env(s)   : Seq -> Env

  -8env_has(s, e)            : Sym -> Env -> Bool
  -8env_drop(s, e)           : Sym -> Env -> Env
  -8env_join(le, re)         : Env -> Env -> Env

Functional primitives
---------------------

   8apply(f, t) : (a+ -> b) -> Tuple(a+) -> b

   8bin_pr(bin, proj) : (a -> a -> b) -> (c -> a) -> (c -> c -> b)

   8chain(f0, f1, ..., fN) : (Any -> Any)+ -> (Any -> Any)

   8compose(f, g) : (a -> b) -> (c -> a) -> (c -> b)

   8identity(x) : a -> a
   8ignore(x)   : a -> Nil

   8always(x) : Any -> True
   8never(x)  : Any -> False

Nil
---

   8nil : Nil

   8is_nil(x) : a -> Bool

Output
------

   8put(x) : a -> Nil

   8emit(m, p) : a -> a -> Nil

   8emit_comma(x)  : a -> Nil
   8emit_lparen(x) : a -> Nil
   8emit_rparen(x) : a -> Nil

   8emit_params(i0, i1, p)          : Num -> Num -> Catenable -> Nil
   8emit_trailing_params(i0, i1, p) : Num -> Num -> Catenable -> Nil

Preprocessing
-------------

   8expand(m, p)   : a -> b -> c

   8adjacent(l, r) : a -> b -> c
   8separate(l, r) : a -> b -> c

   8paste(l, r)    : a -> b -> c

   8stringize(x)   : a -> StringLiteral

Symbols
-------

   8is_sym(x) : a -> Bool

   8same(x, y)     : Sym -> Sym -> Bool
   8not_same(x, y) : Sym -> Sym -> Bool

Sequences
---------

  Predicates:

   8seq_is_nil(s)                 : Seq -> Bool
   8seq_isnt_nil(s)               : Seq -> Bool

  Operators:

   8seq_append(s0, s1, ..., sN)   : Seq+ -> Seq

  First-order:

   8seq_at(i, s)                  : Num -> Seq -> a
   8seq_set(i, s, x)              : Num -> Seq -> a -> Seq
   8seq_range(i, n, s)            : Num -> Num -> Seq -> Seq

   8seq_first(s)                  : Seq -> Any
   8seq_rest(s)                   : Seq -> Seq

   8seq_last(s)                   : Seq -> Any

   8seq_take(n, s)                : Num -> Seq -> Seq
   8seq_drop(n, s)                : Num -> Seq -> Seq

   8seq_size(s)                   : Seq -> Num

   8seq_reverse(s)                : Seq -> Seq

   8seq_pop_at(i, s)              : Num -> Seq -> Seq
   8seq_pop_back(s)               : Seq -> Seq
   8seq_pop_front(s)              : Seq -> Seq
   8seq_pop_range(i, n, s)        : Num -> Num -> Seq -> Seq

   8seq_push_at(i, s, x)          : Num -> Seq -> a -> Seq
   8seq_push_back(x, s)           : a -> Seq -> Seq
   8seq_push_front(x, s)          : a -> Seq -> Seq
   8seq_push_range(i, s, ss)      : Num -> Seq -> Seq -> Seq

   8seq_split(i, s)               : Num -> Seq(a) -> Tuple(Seq(a), Seq(a))
   8seq_join(ls, rs)              : Seq(a) -> Seq(a) -> Seq(a)

   8seq_iota(i0, i1)              : Num -> Num -> Seq(Num)

   8seq_cat(s)                    : Seq(Catenable) -> Catenable
   8seq_cat_reverse(s)            : Seq(Catenable) -> Catenable

   8seq_to_tuple(s)               : Seq -> Tuple

  Higher-order:

   8seq_unfold(cn, st, fn, x)        : (a -> Bool) -> (a -> a) -> (a -> b) -> a -> Seq(b)

   8seq_fold(fn, x, s)               : (a -> b -> a) -> a -> Seq(b) -> a
  -8seq_fold_product(f, x, ss)       : (a -> b+ -> a) -> a -> Seq(b) -> a
  -8seq_fold_perms(f, x, s)          : (a -> Seq(b) -> a) -> a -> Seq(b) -> a

   8seq_filter(pr, s)                : (a -> Bool) -> Seq(a) -> Seq(a)

   8seq_for_each(op, s)                     : (a -> b) -> Seq(a) -> Nil
   8seq_for_each_in_product(op, ss)         : (Any+ -> b) -> Seq(Seq) -> Nil
  -8seq_for_each_in_perms(op, s)            : (Seq(a) -> b) -> Seq(a) -> Nil
   8seq_for_each_with_idx(op, i0, s)        : (Num -> a -> b) -> Num -> Seq(a) -> Nil
   8seq_for_each_with_delimiter(op, dop, s) : (a -> b) -> (b -> c) -> Seq(a) -> b

   8seq_map(fn, s)                   : (a -> b) -> Seq(a) -> Seq(b)

   8seq_merge(pr, los, ros)          : (a -> a -> Bool) -> Seq(a) -> Seq(a) -> Seq(a)
   8seq_merge_sort(pr, s)            : (a -> a -> Bool) -> Seq(a) -> Seq(a)

   8seq_partition(pr, s)             : (a -> Bool) -> Seq(a) -> Tuple(Seq(a), Seq(a))
   8seq_partition_sort(pr, s)        : (a -> a -> Bool) -> Seq(a) -> Seq(a)

  -8seq_is_sorted(pr, s)             : (a -> a -> Bool) -> Seq(a) -> Bool
   8seq_sort(pr, s)                  : (a -> a -> Bool) -> Seq(a) -> Seq(a)

  -8seq_unique(pr, os)               : (a -> a -> Bool) -> Seq(a) -> Seq(a)

   8seq_select(pr, x, s)             : (a -> a -> Bool) -> a -> Seq(a) -> a

   8seq_exists(pr, s)                : (a -> Bool) -> Seq(a) -> Bool
   8seq_for_all(pr, s)               : (a -> Bool) -> Seq(a) -> Bool

   8seq_count(pr, s)                 : (a -> Bool) -> Seq(a) -> Num

  -8seq_lin_search(pr, s)            : (a -> Bool) -> Seq(a) -> Tuple(Seq(a), Seq(a))

  -8seq_diff(pr, los, ros)           : (a -> a -> Bool) -> Seq(a) -> Seq(a) -> Seq(a)
  -8seq_insert(pr, x, os)            : (a -> a -> Bool) -> a -> Seq(a) -> Seq(a)
  -8seq_inters(pr, los, ros)         : (a -> a -> Bool) -> Seq(a) -> Seq(a) -> Seq(a)
  -8seq_symm_diff(pr, los, ros)      : (a -> a -> Bool) -> Seq(a) -> Seq(a) -> Seq(a)
  -8seq_union(pr, los, ros)          : (a -> a -> Bool) -> Seq(a) -> Seq(a) -> Seq(a)

  -8seq_bin_search(pr, s)            : (a -> Bool) -> Seq(a) -> Tuple(Seq(a), Seq(a))

  -8seq_zip_with(fn, ss)             : (Any+ -> Any) -> Seq(Seq) -> Seq

Tuples
------

  -8singleton(a)        : a -> Tuple(a)
   8pair(a, b)          : a -> b -> Tuple(a, b)

   8is_tuple(x)         : a -> Bool

   8tuple_at(i, t)      : Num -> Tuple -> a
   8tuple_at_[0,9](t)   : Tuple -> a

   8tuple_drop(n, t)    : Num -> Tuple -> Tuple
   8tuple_drop_[1-9](t) : Tuple -> Tuple

   8tuple_size(t)       : Tuple -> Num

  -8tuple_take(n, t)    : Num -> Tuple -> Tuple
  -8tuple_take_[1-9](t) : Tuple -> Tuple

   8tuple_to_seq(t)     : Tuple(a+) -> Seq(a)
