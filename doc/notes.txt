==========================================================================

(C) Copyright Vesa Karvonen 2004.
 
     Distributed under the Boost Software License, Version 1.0.

==========================================================================

                                  NOTE
                                  ====

     These DESIGN NOTES are not intended to serve as documentation.

==========================================================================

SYNTAX
======

  <exp>
   ::= fn(<var>+, <exp>)
     | ap(<exp>+)
     | <var>
     | if(<exp_{cond}>, <exp_{cons}>, <exp_{alt}>)
     | and(<exp>+)
     | or(<exp>+)
     | do(<exp>+)
     | let({<var>, <exp_{init}>}+, <exp_{body}>)
     | for(<var>, <exp_{init}>, <exp_{cond}>, <exp_{step}>, <exp>+)
     | match(<exp_{val}>, {<pat>, <exp>}+)
     | try(<exp_{body}>, <var>, <exp_{handler}>)
     | <fn>
     | <fn>(<exp>+)
     | <op>(<exp>+)
     | <const>

  <var>
   ::= [A-Z][a-z0-9]?

  <pat>
   ::= Tuple(<pat>+{,rest(<var|_>)}?)
     | Seq(<pat>+{,rest(<var|_>)}?)
     | <ctor>
     | <ctor>(<pat>+)
     | Nil
     | <var>                         ;; Matches anything and bings <var>
     | _                             ;;     -- || --     and binds nothing

--------------------------------------------------------------------------

DEFINITIONS <#define ORDER_PP_DEF_>
-----------

Order should support various kinds of definitions for ease-of-use.

  <name> ORDER_PP_CONST(<pp-param>)

Defines a named constant. The expression ''<name>'' then evaluates to
''<pp-param>''. Constant definitions can also be function-like macros, but
except for the highly useful ''quote(<pp-param>)'' there probably aren't
many uses for such definitions.

It should also be possible to get the value of a constant so that it can
be embedded into another constant. This is necessary to avoid having to
manually duplicate information accross constants. For this purpose, a
macro ''ORDER_PP_GET_CONST(<name>)'' should be defined.

  <name>(<pp-args>) ORDER_PP_MACRO(<exp>)

Defines a "macro". The effect is that an expression of the form
''<name>(<params>)'' is macro replaced to ''<exp>''. The interpreter then
evaluates the ''<exp>''. Macros are efficient, because the macro
replacement doesn't take an additional continuation machine step. Macros
can not be partially applied and may cause surprises.

  <name> ORDER_PP_FN(<exp_{fn}>)
  <name> ORDER_PP_FN_CM(<arity>, <instr>, (,<cont>))
  <name> ORDER_PP_FN_MACRO(<arity>, <macro>)
  <name> ORDER_PP_FN_MACRO_P(<arity>, <macro>)

Each of the above defines a function. Functions take their arguments
one-by-one and have a fixed arity.

  <name> ORDER_PP_OP(<assoc>,<pp-param_{unit}>,<exp_{fn}>)
  <name> ORDER_PP_OP_CM(<assoc>,<pp-param_{unit}>,<instr>,(,<cont>))
  <name> ORDER_PP_OP_MACRO(<assoc>,<pp-param_{unit}>,<macro>)
  <name> ORDER_PP_OP_MACRO_P(<assoc>,<pp-param_{unit}>,<macro>)

Each of the above defines an operator. Operators take all of their
arguments immediately and they can not be applied partially. The
associativity of an operator is one of:

  left      | left-associative            | op(... op(x1,x2) ..., xn)
  left_w_1  | left-associative with unit  | op(... op( 1,x1) ..., xn)
  right     | right-associative           | op(xn, ... op(x2,x1) ...)
  right_w_1 | right-associative with unit | op(xn, ... op(x1, 1) ...)

The unit element is unused when associativity is ''left'' or ''right''.

--------------------------------------------------------------------------

DATA TYPES
==========

Basic containers
----------------

Order should support at least tuples and sequences. Tuples are required
for passing parameters to macros and are generally useful as input syntax.
Sequences are more efficient than lists and are also syntactically
simpler.

Tuples should only require a small number of first-order functions.

Sequences should come with a fairly comprehensive set of optimized
functions, in order to enable decent performance. The first-order
functions could be borrowed from Chaos.

Strings
-------

TBD!

Set, Mat and Priority Queue
---------------------------

More advanced program generators are going to need sets, maps and priority
queues. (For string processing, a trie might also be useful.)

TBD!

--------------------------------------------------------------------------

STANDARD PRELUDE
================

Constants
---------

  {0,...,256} : Num

  true  : Bool
  false : Bool

  nil : Nil

Operators
---------

  chain(F1,...,Fn) : Fn+ -> Fn

  add(N1,...,Nn) : Num+ -> Num
  sub(N1,...,Nn) : Num+ -> Num
  mul(N1,...,Nn) : Num+ -> Num
  div(N1,...,Nn) : Num+ -> Num

  expand(X1,...,Xn) : Any+ -> Any
  cat(X1,...,Xn)    : Any+ -> Any
  stringize(X)      : Any -> Any

  emit_expand(X1,...,Xn) : Any+ -> Nil
  emit_cat(X1,...,Xn)    : Any+ -> Nil

First-order functions
---------------------

  throw(X) : Any -> Any

  exit(X) : Any -> Any

  inc(N) : Num -> Num
  dec(N) : Num -> Num

  not(X) : Bool -> Bool

  is_0(N)   : Num -> Bool
  isnt_0(N) : Num -> Bool

  equal(S0,S1)  : Sym -> Sym -> Bool
  not_eq(S0,S1) : Sym -> Sym -> Bool

  less(Ln,Rn)       : Num -> Num -> Bool
  less_eq(Ln,Rn)    : Num -> Num -> Bool
  greater(Ln,Rn)    : Num -> Num -> Bool
  greater_eq(Ln,Rn) : Num -> Num -> Bool

Environments
------------

  env_nil            : Env
  env_has(En,Sy)     : Env -> Sym -> Bool
  env_ref(En,Sy)     : Env -> Sym -> Any
  env_bind(En,Sy,Va) : Env -> Sym -> Any -> Env
  env_drop(En,Sy)    : Env -> Sym -> Env
  env_append(Ep,Es)  : Env -> Env -> Env

Reflection
----------

  call_cc(Fn) : (Fn -> Any) -> Any
  call_ce(Fn) : (Env -> Any) -> Any
  eval(Ex,En) : Exp -> Env -> Any

Higher-order functions
----------------------

  for_each(Cn,St,Op,X) : (Any -> Bool) -> (Any -> Any) -> (Any -> Nil) -> Any -> Nil

  for_each_in_range(Op,Fr,To) : (Num -> Nil) -> Num -> Num -> Nil

Type predicates
---------------

  is_edible(X) : Any -> Bool
  is_sym(X)    : Any -> Bool
  is_tuple(X)  : Any -> Bool
  is_nil(X)    : Any -> Bool

Macros / Syntax extensions
--------------------------

  when(<exp_{cond}>, <exp_{body}>+)
  unless(<exp_{cond}>, <exp_{body}>+)

  with_assertion(<exp_{cond}>, <exp_{exit-value}>, <exp_{body}>)

Tuples
------

  tuple(X0,...,Xn) : Any+ -> Tuple
  tuple_at(T,I)    : Tuple -> Num -> Any
  tuple_size(T)    : Tuple -> Num
  tuple_to_seq(T)  : Tuple -> Seq

Sequences
---------

  First-order:

    seq(X0,...,Xn)             : Any+ -> Seq
    seq_append(Ls,Rs)          : Seq -> Seq -> Seq
    seq_at(S,I)                : Seq -> Num -> Any
    seq_first(S)               : Seq -> Any
    seq_first_n(S,N)           : Seq -> Num -> Seq
    seq_insert(S,I,X)          : Seq -> Any -> Seq
    seq_insert_subseq(S,I,Ss)  : Seq -> Seq -> Seq
    seq_pop_back(S)            : Seq -> Seq
    seq_pop_front(S)           : Seq -> Seq
    seq_push_back(S,X)         : Seq -> Any -> Seq
    seq_push_front(S,X)        : Seq -> Any -> Seq
    seq_remove(S,I)            : Seq -> Num -> Seq
    seq_remove_subseq(S,I0,I1) : Seq -> Num -> Num -> Seq
    seq_rest(S)                : Seq -> Seq
    seq_rest_n(S,N)            : Seq -> Num -> Seq
    seq_reverse(S)             : Seq -> Seq
    seq_set(S,I,X)             : Seq -> Num -> Any -> Seq
    seq_size(S)                : Seq -> Num
    seq_split(S,I)             : Seq -> Seq -> Tuple(Seq, Seq)
    seq_subseq(S,I,N)          : Seq -> Num -> Num -> Seq
    seq_to_tuple(S)            : Seq -> Tuple

  Higher-order:

    seq_exists(Pr,Seq)                    : (Any -> Bool) -> Seq -> Bool
    seq_filter(Pr,S)                      : (Any -> Bool) -> Seq -> Seq
    seq_fold(Fn,X,S)                      : (Any -> Any -> Any) -> Any -> Seq -> Any
    seq_for_all(Pr,Seq)                   : (Any -> Bool) -> Seq -> Bool
    seq_for_each(Op,S)                    : (Any -> Nil) -> Seq -> Nil
    seq_for_each_in_product(Op,Ss)        : (Any+ -> Nil) -> Seq(Seq) -> Nil
    seq_for_each_with_idx(Op,S)           : (Num -> Any -> Nil) -> Seq -> Nil
    seq_map(Fn,S)                         : (Any -> Any) -> Seq -> Seq
    seq_merge(Pr,S0,S1)                   : (Any -> Any -> Bool) -> Seq -> Seq -> Seq
    seq_parallel_fold(Fn,S,Ss)            : (Any+ -> Any) -> Seq -> Seq(Seq) -> Any
    seq_parallel_for_each(Op,Ss)          : (Any+ -> Nil) -> Seq(Seq) -> Nil
    seq_parallel_for_each_with_idx(Op,Ss) : (Num -> Any+ -> Nil) -> Seq(Seq) -> Nil
    seq_parallel_map(Fn,Ss)               : (Any+ -> Any) -> Seq(Seq) -> Seq
    seq_partition(Pr,S)                   : (Any -> Bool) -> Seq -> Tuple(Seq, Seq)
    seq_sort(Pr,S)                        : (Any -> Any -> Bool) -> Seq -> Seq
    seq_unfold(Cn,St,Fn,X)                : (Any -> Bool) -> (Any -> Any) -> (Any -> Any) -> Any -> Seq

--------------------------------------------------------------------------

LIBRARIES
=========

  "hp_arithm.h":

  "enum.h":

  "string.h":
