#!/bin/bash

# (C) Copyright Vesa Karvonen 2004.
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.)

TIMEFORMAT='  Time: %R seconds'

if test "$1" == "-d" ; then
    cppOpt="-D ORDER_PP_DEBUG"
    shift
else
    cppOpt=""
fi

function is-cpp {
    echo "$1" | grep '\.\(cpp\|ii\)$' > /dev/null
}

function preprocessed-file {
    echo ".$1" | sed -e 's#\.cpp$#.ii#g' -e 's#\.c$#.i#g'
}

function compile {
    if is-cpp "$1" ; then
        time g++ -c -std=c++98 -Wall -Werror -pedantic-errors "$1"
    else
        time gcc -c -std=c99 -Wall -Werror -pedantic-errors "$1"
    fi && \
        rm "$(echo "$1" | sed 's#\.[^.]\+$#.o#g')"
}

function preprocess {
    if is-cpp "$1" ; then
        # TBD: We can't used -pedantic here due to variadic macros.
        time g++ $cppOpt -E -std=c++98 -Wall -I ../inc/ -I ../../chaos-pp/ "$1"
    else
        time gcc $cppOpt -E -std=c99 -Wall -Werror -pedantic-errors -I ../inc/ -I ../../chaos-pp/ "$1"
    fi
}

for f in "$@" ; do
    f=$(echo "$f" | sed 's#^\./##g')

    if ! echo "$f" | grep -e '\.cpp$' -e '\.c$' > /dev/null ; then
        echo "Warning: Skipping '$f' which is neither a C nor C++ implementation file."
        continue
    fi

    echo "Testing '$f':"

    echo " Preprocessing..."
    if ! preprocess "$f" > "$(preprocessed-file "$f")" ; then
        echo "Error preprocessing '$f'."
        exit 1
    fi

    if grep '\{' "$(preprocessed-file "$f")" > /dev/null && \
        grep '\}' "$(preprocessed-file "$f")" > /dev/null && \
        grep '\;' "$(preprocessed-file "$f")" > /dev/null ; then
        echo " Compiling..."
        if ! compile "$(preprocessed-file "$f")" ; then
            echo "Error compiling '$f'."
            exit 1
        fi
    else
        echo " Output doesn't look like code. Skipping compilation."
    fi

    numPrefixLines=$(grep -n -e 'order/interpreter.h' "$(preprocessed-file "$f")" | tail -n1 | grep -o '^[0-9]\+')
    numLines=$(cat "$(preprocessed-file "$f")" | wc -l)
    cat "$(preprocessed-file "$f")" | tail -n$(($numLines - $numPrefixLines)) | grep -v -e '^#' -e '^$' > ".$f.new"

    if test -f ".$f.out" ; then
        if diff -q ".$f.out" ".$f.new" > /dev/null ; then
            rm ".$f.new"
        else
            echo " The old and new output differ!"
            diff ".$f.out" ".$f.new" | less

            read -e -n 1 -p " [(Q)uit | (U)se new result | (S)kip without removing new output | Skip]? "
            case "$REPLY" in
                ("u"|"U")
                echo " Using new result..."
                mv ".$f.new" ".$f.out" ;;
                ("s"|"S")
                echo " Skipping... See the file '.$f.new'."
                exit ;;
                ("q"|"Q")
                echo " Quitting and removing '.$f.new'..."
                rm ".$f.new"
                exit 1 ;;
                (*)
                echo " Skipping and removing '.$f.new'..."
                rm ".$f.new" ;;
            esac
        fi
    else
        less ".$f.new"

        read -e -n 1 -p " [(Q)uit | (S)kip without removing output | Use result]? "
        case "$REPLY" in
            ("q"|"Q")
            echo " Quitting and removing '.$f.new'..."
            rm ".$f.new"
            exit 1 ;;
            ("s"|"S")
            echo " Skipping... See the file '.$f.new'."
            exit ;;
            (*)
            echo " Using result..."
            mv ".$f.new" ".$f.out" ;;
        esac
    fi
done
