#ifndef ORDER_INC_ORDER_LIB_KEYWORDS_H_VAJK20040620
#define ORDER_INC_ORDER_LIB_KEYWORDS_H_VAJK20040620

// (C) Copyright Vesa Karvonen 2004.
//
// Distributed under the Boost Software License, Version 1.0.

#define ORDER_PP_TOKEN__Bool (_Bool)
#define ORDER_PP_TOKEN__Complex (_Complex)
#define ORDER_PP_TOKEN__Imaginary (_Imaginary)
#define ORDER_PP_TOKEN_asm (asm)
#define ORDER_PP_TOKEN_auto (auto)
#define ORDER_PP_TOKEN_bool (bool)
#define ORDER_PP_TOKEN_break (break)
#define ORDER_PP_TOKEN_case (case)
#define ORDER_PP_TOKEN_catch (catch)
#define ORDER_PP_TOKEN_char (char)
#define ORDER_PP_TOKEN_class (class)
#define ORDER_PP_TOKEN_const (const)
#define ORDER_PP_TOKEN_const_cast (const_cast)
#define ORDER_PP_TOKEN_continue (continue)
#define ORDER_PP_TOKEN_default (default)
#define ORDER_PP_TOKEN_delete (delete)
#define ORDER_PP_TOKEN_do (do)
#define ORDER_PP_TOKEN_double (double)
#define ORDER_PP_TOKEN_dynamic_cast (dynamic_cast)
#define ORDER_PP_TOKEN_else (else)
#define ORDER_PP_TOKEN_enum (enum)
#define ORDER_PP_TOKEN_explicit (explicit)
#define ORDER_PP_TOKEN_extern (extern)
#define ORDER_PP_TOKEN_false (false)
#define ORDER_PP_TOKEN_float (float)
#define ORDER_PP_TOKEN_for (for)
#define ORDER_PP_TOKEN_friend (friend)
#define ORDER_PP_TOKEN_goto (goto)
#define ORDER_PP_TOKEN_if (if)
#define ORDER_PP_TOKEN_inline (inline)
#define ORDER_PP_TOKEN_int (int)
#define ORDER_PP_TOKEN_long (long)
#define ORDER_PP_TOKEN_mutable (mutable)
#define ORDER_PP_TOKEN_namespace (namespace)
#define ORDER_PP_TOKEN_new (new)
#define ORDER_PP_TOKEN_operator (operator)
#define ORDER_PP_TOKEN_private (private)
#define ORDER_PP_TOKEN_protected (protected)
#define ORDER_PP_TOKEN_public (public)
#define ORDER_PP_TOKEN_register (register)
#define ORDER_PP_TOKEN_reinterpret_cast (reinterpret_cast)
#define ORDER_PP_TOKEN_restrict (restrict)
#define ORDER_PP_TOKEN_return (return)
#define ORDER_PP_TOKEN_short (short)
#define ORDER_PP_TOKEN_signed (signed)
#define ORDER_PP_TOKEN_sizeof (sizeof)
#define ORDER_PP_TOKEN_static (static)
#define ORDER_PP_TOKEN_static_cast (static_cast)
#define ORDER_PP_TOKEN_struct (struct)
#define ORDER_PP_TOKEN_switch (switch)
#define ORDER_PP_TOKEN_template (template)
#define ORDER_PP_TOKEN_this (this)
#define ORDER_PP_TOKEN_throw (throw)
#define ORDER_PP_TOKEN_true (true)
#define ORDER_PP_TOKEN_try (try)
#define ORDER_PP_TOKEN_typedef (typedef)
#define ORDER_PP_TOKEN_typeid (typeid)
#define ORDER_PP_TOKEN_typename (typename)
#define ORDER_PP_TOKEN_union (union)
#define ORDER_PP_TOKEN_unsigned (unsigned)
#define ORDER_PP_TOKEN_using (using)
#define ORDER_PP_TOKEN_virtual (virtual)
#define ORDER_PP_TOKEN_void (void)
#define ORDER_PP_TOKEN_volatile (volatile)
#define ORDER_PP_TOKEN_wchar_t (wchar_t)
#define ORDER_PP_TOKEN_while (while)

#define ORDER_PP_SYM__Bool__Bool(P,x) ,P##x,
#define ORDER_PP_SYM__Complex__Complex(P,x) ,P##x,
#define ORDER_PP_SYM__Imaginary__Imaginary(P,x) ,P##x,
#define ORDER_PP_SYM_asm_asm(P,x) ,P##x,
#define ORDER_PP_SYM_auto_auto(P,x) ,P##x,
#define ORDER_PP_SYM_bool_bool(P,x) ,P##x,
#define ORDER_PP_SYM_break_break(P,x) ,P##x,
#define ORDER_PP_SYM_case_case(P,x) ,P##x,
#define ORDER_PP_SYM_catch_catch(P,x) ,P##x,
#define ORDER_PP_SYM_char_char(P,x) ,P##x,
#define ORDER_PP_SYM_class_class(P,x) ,P##x,
#define ORDER_PP_SYM_const_const(P,x) ,P##x,
#define ORDER_PP_SYM_const_cast_const_cast(P,x) ,P##x,
#define ORDER_PP_SYM_continue_continue(P,x) ,P##x,
#define ORDER_PP_SYM_default_default(P,x) ,P##x,
#define ORDER_PP_SYM_delete_delete(P,x) ,P##x,
#define ORDER_PP_SYM_do_do(P,x) ,P##x,
#define ORDER_PP_SYM_double_double(P,x) ,P##x,
#define ORDER_PP_SYM_dynamic_cast_dynamic_cast(P,x) ,P##x,
#define ORDER_PP_SYM_else_else(P,x) ,P##x,
#define ORDER_PP_SYM_enum_enum(P,x) ,P##x,
#define ORDER_PP_SYM_explicit_explicit(P,x) ,P##x,
#define ORDER_PP_SYM_extern_extern(P,x) ,P##x,
#define ORDER_PP_SYM_false_false(P,x) ,P##x,
#define ORDER_PP_SYM_float_float(P,x) ,P##x,
#define ORDER_PP_SYM_for_for(P,x) ,P##x,
#define ORDER_PP_SYM_friend_friend(P,x) ,P##x,
#define ORDER_PP_SYM_goto_goto(P,x) ,P##x,
#define ORDER_PP_SYM_if_if(P,x) ,P##x,
#define ORDER_PP_SYM_inline_inline(P,x) ,P##x,
#define ORDER_PP_SYM_int_int(P,x) ,P##x,
#define ORDER_PP_SYM_long_long(P,x) ,P##x,
#define ORDER_PP_SYM_mutable_mutable(P,x) ,P##x,
#define ORDER_PP_SYM_namespace_namespace(P,x) ,P##x,
#define ORDER_PP_SYM_new_new(P,x) ,P##x,
#define ORDER_PP_SYM_operator_operator(P,x) ,P##x,
#define ORDER_PP_SYM_private_private(P,x) ,P##x,
#define ORDER_PP_SYM_protected_protected(P,x) ,P##x,
#define ORDER_PP_SYM_public_public(P,x) ,P##x,
#define ORDER_PP_SYM_register_register(P,x) ,P##x,
#define ORDER_PP_SYM_reinterpret_cast_reinterpret_cast(P,x) ,P##x,
#define ORDER_PP_SYM_restrict_restrict(P,x) ,P##x,
#define ORDER_PP_SYM_return_return(P,x) ,P##x,
#define ORDER_PP_SYM_short_short(P,x) ,P##x,
#define ORDER_PP_SYM_signed_signed(P,x) ,P##x,
#define ORDER_PP_SYM_sizeof_sizeof(P,x) ,P##x,
#define ORDER_PP_SYM_static_static(P,x) ,P##x,
#define ORDER_PP_SYM_static_cast_static_cast(P,x) ,P##x,
#define ORDER_PP_SYM_struct_struct(P,x) ,P##x,
#define ORDER_PP_SYM_switch_switch(P,x) ,P##x,
#define ORDER_PP_SYM_template_template(P,x) ,P##x,
#define ORDER_PP_SYM_this_this(P,x) ,P##x,
#define ORDER_PP_SYM_throw_throw(P,x) ,P##x,
#define ORDER_PP_SYM_true_true(P,x) ,P##x,
#define ORDER_PP_SYM_try_try(P,x) ,P##x,
#define ORDER_PP_SYM_typedef_typedef(P,x) ,P##x,
#define ORDER_PP_SYM_typeid_typeid(P,x) ,P##x,
#define ORDER_PP_SYM_typename_typename(P,x) ,P##x,
#define ORDER_PP_SYM_union_union(P,x) ,P##x,
#define ORDER_PP_SYM_unsigned_unsigned(P,x) ,P##x,
#define ORDER_PP_SYM_using_using(P,x) ,P##x,
#define ORDER_PP_SYM_virtual_virtual(P,x) ,P##x,
#define ORDER_PP_SYM_void_void(P,x) ,P##x,
#define ORDER_PP_SYM_volatile_volatile(P,x) ,P##x,
#define ORDER_PP_SYM_wchar_t_wchar_t(P,x) ,P##x,
#define ORDER_PP_SYM_while_while(P,x) ,P##x,

#endif
